package com.example.test

import android.Manifest
import android.annotation.SuppressLint
import android.content.Intent
import android.content.IntentFilter
import android.media.AudioManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.provider.Settings
import android.telephony.TelephonyManager
import android.util.Log
import android.webkit.WebChromeClient
import android.webkit.WebView
import android.webkit.WebViewClient
import androidx.activity.result.contract.ActivityResultContracts
import androidx.fragment.app.FragmentActivity

class MainActivity : FragmentActivity() {
    private var callReceiver: CallReceiver? = null
    private var webView: WebView? = null
    lateinit var biometricHelper: BiometricHelper
    private var TAG: String = "asdf"
    private val requestAudioPermissionLauncher =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted ->
            if (isGranted) {
                Log.d(TAG, "üé§ RECORD_AUDIO Í∂åÌïú ÌóàÏö©Îê®!")
            } else {
                Log.e(TAG, "‚ùå RECORD_AUDIO Í∂åÌïú Í±∞Î∂ÄÎê®!")
            }
        }

    @SuppressLint("SetJavaScriptEnabled")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        webView = WebView(this).apply {
            settings.javaScriptEnabled = true
            webViewClient = WebViewClient()
            webChromeClient = WebChromeClient()
            addJavascriptInterface(BiometricWebInterface(this@MainActivity), "AndroidBiometric")
            loadUrl("file:///android_asset/biometric.html")
        }
        setContentView(webView)

        biometricHelper = BiometricHelper(this, webView)

        Log.d("MainActivity", "onCreate Ìò∏Ï∂úÎê®!")

        requestStoragePermission()

        requestPermissionsLauncher.launch(
            arrayOf(
                Manifest.permission.READ_PHONE_STATE,
                Manifest.permission.READ_CALL_LOG,
                Manifest.permission.RECORD_AUDIO
            )
        )
    }

    private val requestPermissionsLauncher =
        registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { permissions ->
            val phoneStateGranted = permissions[Manifest.permission.READ_PHONE_STATE] ?: false
            val callLogGranted = permissions[Manifest.permission.READ_CALL_LOG] ?: false

            if (phoneStateGranted && callLogGranted) {
                Log.d("MainActivity", "Í∂åÌïúÏù¥ ÌóàÏö©Îê®!")
                registerCallReceiver()
            } else {
                Log.d("MainActivity", "Í∂åÌïúÏù¥ Í±∞Î∂ÄÎê®!")
            }
        }

    private fun registerCallReceiver() {
        callReceiver = CallReceiver()
        val filter = IntentFilter(TelephonyManager.ACTION_PHONE_STATE_CHANGED)
        registerReceiver(callReceiver, filter)
        Log.d("MainActivity", "CallReceiver Îì±Î°ùÎê®!")
    }

    private val requestManageStoragePermission =
        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                if (Environment.isExternalStorageManager()) {
                    Log.d("Permission", "‚úÖ MANAGE_EXTERNAL_STORAGE Í∂åÌïú ÌóàÏö©Îê®!")
                } else {
                    Log.e("Permission", "‚ùå MANAGE_EXTERNAL_STORAGE Í∂åÌïú Í±∞Î∂ÄÎê®!")
                }
            }
        }

    fun requestStoragePermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            if (!Environment.isExternalStorageManager()) {
                val intent = Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION)
                intent.data = Uri.parse("package:$packageName")
                requestManageStoragePermission.launch(intent)
            }
        } else {
            requestPermissionsLauncher.launch(
                arrayOf(
                    Manifest.permission.READ_EXTERNAL_STORAGE,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE
                )
            )
        }
    }



    private fun isCallRecording(): Boolean {
        val audioManager = getSystemService(AUDIO_SERVICE) as AudioManager
        return audioManager.mode == AudioManager.MODE_IN_CALL && !audioManager.isMicrophoneMute
    }

    override fun onDestroy() {
        super.onDestroy()
        callReceiver?.let {
            unregisterReceiver(it)
            Log.d("MainActivity", "CallReceiver Ìï¥Ï†úÎê®!")
        }
    }
}

